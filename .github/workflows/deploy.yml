name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      PORT: ${{ secrets.PORT }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      BE_URL: ${{ secrets.BE_URL }}
      FE_URL: ${{ secrets.FE_URL }}
      IMAGE_BB_API_KEY: ${{ secrets.IMAGE_BB_API_KEY }}
      REST_API_KEY: ${{ secrets.REST_API_KEY }}
      KAKAO_APP_KEY: ${{ secrets.KAKAO_APP_KEY }}
      CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      FE_URL_DEV: ${{ secrets.FE_URL_DEV }}
      FE_URL_LOCAL: ${{ secrets.FE_URL_LOCAL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VULTR_SSH_KEY }}

      - name: Build Docker image
        run: |
          docker buildx build \
            --build-arg PORT=${{ secrets.PORT }} \
            --build-arg MONGODB_URI=${{ secrets.MONGODB_URI }} \
            --build-arg BE_URL=${{ secrets.BE_URL }} \
            --build-arg FE_URL=${{ secrets.FE_URL }} \
            --build-arg IMAGE_BB_API_KEY=${{ secrets.IMAGE_BB_API_KEY }} \
            --build-arg REST_API_KEY=${{ secrets.REST_API_KEY }} \
            --build-arg KAKAO_APP_KEY=${{ secrets.KAKAO_APP_KEY }} \
            --build-arg CLIENT_SECRET=${{ secrets.CLIENT_SECRET }} \
            --build-arg SECRET_KEY=${{ secrets.SECRET_KEY }} \
            --build-arg FE_URL_DEV=${{ secrets.FE_URL_DEV }} \
            --build-arg FE_URL_LOCAL=${{ secrets.FE_URL_LOCAL }} \
            -t simpang:latest .
          docker save simpang:latest -o simpang.tar

      - name: Copy Docker image to Vultr server
        run: scp -o StrictHostKeyChecking=no ./simpang.tar ${{ secrets.VULTR_USERNAME }}@${{ secrets.VULTR_HOST }}:/home/${{ secrets.VULTR_USERNAME }}/docker-images/

      - name: SSH into Vultr server and deploy Docker container
        run: |
          ssh ${{ secrets.VULTR_USERNAME }}@${{ secrets.VULTR_HOST }} << 'EOF'
            docker load -i /home/${{ secrets.VULTR_USERNAME }}/docker-images/simpang.tar
            docker stop simpang || true
            docker rm simpang || true
            docker run -d --name simpang -p 8080:${{ secrets.PORT }} simpang:latest
            docker image prune -f
          EOF
